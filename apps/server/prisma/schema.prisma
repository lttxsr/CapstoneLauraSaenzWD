datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  favorites    Favorite[]
  loans        Loan[]
  reservations Reservation[]
  readings     Reading[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  title     String
  author    String?
  coverUrl  String?
  year      Int?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
}

model Loan {
  id         String    @id @default(cuid())
  userId     String
  bookId     String
  title      String
  author     String?
  coverUrl   String?
  year       Int?
  due        DateTime
  returned   Boolean   @default(false)
  returnedAt DateTime?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])

  @@index([bookId, returned])
}

model Reservation {
  id            String    @id @default(cuid())
  userId        String
  bookId        String
  title         String
  author        String?
  coverUrl      String?
  year          Int?
  requestedDays Int       @default(14)
  status        String    @default("PENDING") // "PENDING" | "FULFILLED" | "CANCELED"
  createdAt     DateTime  @default(now())
  fulfilledAt   DateTime?
  canceledAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, bookId, status])
  @@index([bookId, status, createdAt])
}

model Reading {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  status    String   @default("NONE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
  @@index([userId, status])
}
